Дан код:

class A {
public function foo() {
static $x = 0;
echo ++$x;
}
}
$a1 = new A();
$a2 = new A();
$a1->foo();
$a2->foo();
$a1->foo();
$a2->foo();

Что он выведет на каждом шаге? Почему?
Ответ:

1. 1
2. 2
3. 3
4. 4

Объяснение:

- Метод foo() использует статическую переменную $x, которая сохраняет свое значение между вызовами этого метода для всех экземпляров класса A.
- При первом вызове $a1->foo(), переменная $x инициализируется значением 0, затем увеличивается на 1 и выводится 1.
- При последующем вызове $a2->foo(), значение $x уже равно 1, поэтому увеличивается до 2 и выводится 2.
Аналогично, третий и четвертый вызовы увеличивают и выводят 3 и 4 соответственно, поскольку $x продолжает сохранять свое состояние между вызовами метода.

Немного изменим п.5 
class A {
public function foo() {
static $x = 0;
echo ++$x;
}
}
class B extends A {
}
$a1 = new A();
$b1 = new B();
$a1->foo();
$b1->foo();
$a1->foo();
$b1->foo();

Что он выведет теперь? 





Код выведет:

1. 1
2. 1
3. 2
4. 2

Объяснение:

- Метод foo() в классе A и классе B использует свою собственную статическую переменную $x.
- При первом вызове $a1->foo(), статическая переменная $x в контексте класса A инициализируется и увеличивается, выводя 1.
- При первом вызове $b1->foo(), статическая переменная $x в контексте класса B инициализируется и увеличивается, выводя 1.
- Последующие вызовы foo() для каждого объекта увеличивают их собственные $x, поэтому выводится 2 для каждого.
